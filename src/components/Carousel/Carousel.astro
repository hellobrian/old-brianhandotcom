---
interface Props {
  images: string[];
}
const { images } = Astro.props;
---

<ul class="carousel">
  {
    images.map((image, index) => (
      <li class="box">
        <img src={image} alt="" />
      </li>
    ))
  }
</ul>
<div class="dots">
  {images.map(() => <button type="button" class="dot button-reset" />)}
</div>

<style>
  .carousel {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: auto;
    scroll-snap-type: x mandatory;
    display: flex;
  }

  .carousel::-webkit-scrollbar {
    -webkit-appearance: none;
    width: 2px;
    height: 2px;
  }

  .carousel::-webkit-scrollbar-thumb {
    border-radius: 4px;
    background-color: var(--accent);
  }

  .box {
    flex-shrink: 0;
    width: 100%;
    scroll-snap-align: start;
  }

  img {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }

  .dots {
    display: flex;
    gap: 14px;
    justify-content: center;
    align-items: center;
  }

  .dot {
    height: 14px;
    width: 14px;
    border-radius: 10px;
    background: var(--very-muted);
  }

  .dot:active {
    background: var(--accent);
  }
  .dot:focus {
    outline: 2px solid var(--white);
  }
</style>
<script is:inline>
  const dots = document.querySelector(".dots");
  dots.addEventListener("click", (e) => {
    const target = e.target;
    if (!target.matches(".dot")) {
      console.log("return");
      return;
    }

    let index = Array.from(dots.children).indexOf(target);
    let selector = `.box:nth-child(${index + 1})`;
    let box = document.querySelector(selector);

    box.scrollIntoView({
      behavior: "smooth",
      inline: "start",
      block: "nearest",
    });
  });
</script>
